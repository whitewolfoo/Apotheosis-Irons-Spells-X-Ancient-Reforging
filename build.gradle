plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
    // later
    // id 'net.neoforged.moddev' version '2.0.105'
    id "me.modmuss50.mod-publish-plugin" version "0.8.3"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id


repositories {
    mavenLocal()

    maven {
        url = uri("https://maven.shadowsoffire.dev/releases")
        content {
            includeGroup("dev.shadowsoffire")
            includeGroup("snownee.jade")
        }
    }
    maven {
        url = uri("https://cursemaven.com")
        content {
            includeGroup("curse.maven")
        }
    }
    maven {
        url = uri("https://api.modrinth.com/maven")
        content {
            includeGroup("maven.modrinth")
        }
    }

    maven {
        url "https://maven.theillusivec4.top/"
    }
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "vazkii.patchouli"
            includeGroupByRegex "net\\.darkhax.*"
            includeGroupByRegex "com\\.blamejared.*"
            includeGroup "org.openzen.zencode"
            includeGroup "mezz.jei"
        }
    }

    maven {
        name = "Curios"
        url = uri("https://maven.theillusivec4.top/")
    }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.kosmx.dev/' }

    maven { url "https://maven.wispforest.io/releases"}
    maven { url "https://maven.su5ed.dev/releases"}
    maven {
        name = "Iron's Maven - Release"
        url = "https://code.redspace.io/releases"
    }
    maven {
        name = "Iron's Maven - Snapshots"
        url = "https://code.redspace.io/snapshots"
    }
    repositories {
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            content {
                includeGroup("software.bernie.geckolib")
            }
        }
    }
}

base {
    archivesName = mod_id
}
\
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // Dev Env
    localRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    localRuntime("snownee.jade:Jade-NeoForge:${minecraft_version}-${jade_version}")

    // Deps
    implementation("dev.shadowsoffire:Placebo:${minecraft_version}-${placebo}")
    implementation("dev.shadowsoffire:Apotheosis:${minecraft_version}-${apotheosis}")
    implementation("dev.shadowsoffire:ApothicAttributes:${minecraft_version}-${apothic_attributes}")
    implementation("dev.shadowsoffire:ApothicSpawners:${minecraft_version}-${apothic_spawners}")
    implementation("dev.shadowsoffire:ApothicEnchanting:${minecraft_version}-${apothic_enchanting}")
    // Override newer version of patchouli due to dev env crash
    implementation("vazkii.patchouli:Patchouli:${patchouli_version}")


    implementation ("io.redspace:irons_spellbooks:${irons_version}")
    runtimeOnly ("software.bernie.geckolib:geckolib-neoforge-${geckolib_version}")
    compileOnly ("top.theillusivec4.curios:curios-neoforge:${curios_version}:api")
    runtimeOnly ("top.theillusivec4.curios:curios-neoforge:${curios_version}")
    runtimeOnly("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator}")

    runtimeOnly ("me.shedaniel.cloth:cloth-config-neoforge:${cloth_config}")

    // Optional Compats
    // https://www.curseforge.com/minecraft/mc-mods/magic-from-the-east
    localRuntime "curse.maven:magic-from-the-east-1224162:6864551"

    // https://www.curseforge.com/minecraft/mc-mods/snackpirates-aeromancy-additions
    // https://www.curseforge.com/minecraft/mc-mods/expandability
    localRuntime "curse.maven:snackpirates-aeromancy-additions-1160104:6781033"
    localRuntime "curse.maven:expandability-465066:5428824"

    // https://www.curseforge.com/minecraft/mc-mods/cataclysm-spellbooks
    // https://www.curseforge.com/minecraft/mc-mods/aces-spell-utils
    // https://www.curseforge.com/minecraft/mc-mods/lendercataclysm
    // https://www.curseforge.com/minecraft/mc-mods/lionfish-api/
    // https://www.curseforge.com/minecraft/mc-mods/azurelib
    localRuntime "curse.maven:cataclysm-spellbooks-1099461:6925079"
    localRuntime "curse.maven:lendercataclysm-551586:6906997"
    localRuntime "curse.maven:azurelib-817423:6849116"
    localRuntime "curse.maven:lionfish-api-1001614:6168249"
    localRuntime "curse.maven:aces-spell-utils-1299492:7093024"

    // OLD VERSIONS https://www.curseforge.com/minecraft/mc-mods/enders-spellsandstuff

    // https://www.curseforge.com/minecraft/mc-mods/enders-spells-and-stuff-requiem
    // https://www.curseforge.com/minecraft/mc-mods/gtbcs-spelllib/
    // localRuntime "curse.maven:enders-spellsandstuff-1140215:6903947"
    // localRuntime "curse.maven:enders-spells-and-stuff-requiem-1336977:6964462"
    localRuntime "curse.maven:gtbcs-spelllib-1194714:6973019"

    // https://www.curseforge.com/minecraft/mc-mods/alshanexs-familiars/
    // https://www.curseforge.com/minecraft/mc-mods/familiarslib/
    localRuntime "curse.maven:alshanexs-familiars-1171602:6825732"
    localRuntime "curse.maven:familiarslib-1316458:6824093"

    // compatibility testing only
    // https://www.curseforge.com/minecraft/mc-mods/irons-spells-n-spellbooks-restrictions
    // localRuntime "curse.maven:irons-spells-n-spellbooks-restrictions-1330168:6937835"

    // https://www.curseforge.com/minecraft/mc-mods/hazen-n-stuff
    localRuntime "curse.maven:hazen-n-stuff-1231627:7103087"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishMods {
    file = jar.archiveFile
    modLoaders.add("neoforge")
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    version = "${mod_version}+${minecraft_version}"
    type = STABLE
    displayName = "${mod_version}+${minecraft_version}"

    curseforge {
        projectId = "${curseforge_project}"
        accessToken = System.getenv("CF_TOKEN")

        minecraftVersions.add(minecraft_version)
        javaVersions.add(JavaVersion.VERSION_21)

        clientRequired = true
        serverRequired = true

        // Dependencies
        requires "apotheosis"
        requires "irons-spells-n-spellbooks"

        optional "cataclysm-spellbooks" // Abyssal
        optional "alshanexs-familiars" // Sound
        optional "snackpirates-aeromancy-additions" // Wind
        optional "magic-from-the-east" // Symmetry
        optional "enders-spells-and-stuff-requiem" // Mind, Spellblade pending
        optional "to-tweaks-irons-spells" // Aqua (pending)
    }

    //github {
   //     accessToken = providers.environmentVariable("GITHUB_TOKEN")
   //     repository = "muon-rw/Apotheosis-Irons-Spells"
    //    commitish = "master"
    //    tagName = "v${project.version}"
   // }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
